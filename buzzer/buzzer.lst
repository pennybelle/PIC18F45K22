;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 4/23/2025 7:53:01 PM
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF000EF0E  	GOTO        28
0x0004	0x0000      	NOP
0x0006	0x0000      	NOP
0x0008	0xF000EF00  	GOTO        0
0x000C	0x0000      	NOP
0x000E	0x0000      	NOP
0x0010	0x0000      	NOP
0x0012	0x0000      	NOP
0x0014	0x0000      	NOP
0x0016	0x0000      	NOP
0x0018	0xD7F3      	BRA         0
_main:
;buzzer.c,9 :: 		void main() {
;buzzer.c,10 :: 		TRISB = 0x0F; // set first four bits on B as inputs
0x001C	0x0E0F      	MOVLW       15
0x001E	0x6E93      	MOVWF       TRISB 
;buzzer.c,11 :: 		ANSELB = 0x00; // set as digital inputs
0x0020	0x010F      	MOVLB       15
0x0022	0x6B39      	CLRF        ANSELB, 1
;buzzer.c,12 :: 		PORTB = 0x00; // clear, set to logic low
0x0024	0x6A81      	CLRF        PORTB 
;buzzer.c,14 :: 		TRISC = 0x00; // set C as output
0x0026	0x6A94      	CLRF        TRISC 
;buzzer.c,15 :: 		PORTC = 0x00; // clear, set to logic low
0x0028	0x6A82      	CLRF        PORTC 
;buzzer.c,17 :: 		while(1) {
L_main0:
;buzzer.c,20 :: 		PORTC = 0x00; // set to low each loop start
0x002A	0x6A82      	CLRF        PORTC 
;buzzer.c,22 :: 		a = RB0_bit; // set each var to a bit on port B
0x002C	0x0E00      	MOVLW       0
0x002E	0xB081      	BTFSC       RB0_bit, BitPos(RB0_bit+0) 
0x0030	0x0E01      	MOVLW       1
0x0032	0x6E04      	MOVWF       R4 
0x0034	0x6A05      	CLRF        R5 
;buzzer.c,23 :: 		b = RB1_bit;
0x0036	0x0E00      	MOVLW       0
0x0038	0xB281      	BTFSC       RB1_bit, BitPos(RB1_bit+0) 
0x003A	0x0E01      	MOVLW       1
0x003C	0x6E06      	MOVWF       R6 
0x003E	0x6A07      	CLRF        R7 
;buzzer.c,24 :: 		c = RB2_bit;
0x0040	0x0E00      	MOVLW       0
0x0042	0xB481      	BTFSC       RB2_bit, BitPos(RB2_bit+0) 
0x0044	0x0E01      	MOVLW       1
0x0046	0x6E08      	MOVWF       R8 
0x0048	0x6A09      	CLRF        R9 
;buzzer.c,25 :: 		d = RB3_bit;
0x004A	0x0E00      	MOVLW       0
0x004C	0xB681      	BTFSC       RB3_bit, BitPos(RB3_bit+0) 
0x004E	0x0E01      	MOVLW       1
0x0050	0x6E0E      	MOVWF       R14 
0x0052	0x6A0F      	CLRF        R15 
;buzzer.c,27 :: 		x = a & b | b & c & d | a & c; // bitwise statement to determine logic out
0x0054	0x5006      	MOVF        R6, 0 
0x0056	0x1404      	ANDWF       R4, 0 
0x0058	0x6E02      	MOVWF       R2 
0x005A	0x5005      	MOVF        R5, 0 
0x005C	0x1407      	ANDWF       R7, 0 
0x005E	0x6E03      	MOVWF       R3 
0x0060	0x5008      	MOVF        R8, 0 
0x0062	0x1406      	ANDWF       R6, 0 
0x0064	0x6E00      	MOVWF       R0 
0x0066	0x5007      	MOVF        R7, 0 
0x0068	0x1409      	ANDWF       R9, 0 
0x006A	0x6E01      	MOVWF       R1 
0x006C	0x500E      	MOVF        R14, 0 
0x006E	0x1600      	ANDWF       R0, 1 
0x0070	0x500F      	MOVF        R15, 0 
0x0072	0x1601      	ANDWF       R1, 1 
0x0074	0x5000      	MOVF        R0, 0 
0x0076	0x1202      	IORWF       R2, 1 
0x0078	0x5001      	MOVF        R1, 0 
0x007A	0x1203      	IORWF       R3, 1 
0x007C	0x5008      	MOVF        R8, 0 
0x007E	0x1404      	ANDWF       R4, 0 
0x0080	0x6E00      	MOVWF       R0 
0x0082	0x5005      	MOVF        R5, 0 
0x0084	0x1409      	ANDWF       R9, 0 
0x0086	0x6E01      	MOVWF       R1 
0x0088	0x5000      	MOVF        R0, 0 
0x008A	0x1202      	IORWF       R2, 1 
0x008C	0x5001      	MOVF        R1, 0 
0x008E	0x1203      	IORWF       R3, 1 
;buzzer.c,29 :: 		if (x==1) {
0x0090	0x0E00      	MOVLW       0
0x0092	0x1803      	XORWF       R3, 0 
0x0094	0xE102      	BNZ         L__main5
0x0096	0x0E01      	MOVLW       1
0x0098	0x1802      	XORWF       R2, 0 
L__main5:
0x009A	0xE110      	BNZ         L_main2
;buzzer.c,30 :: 		PORTC = 0x01;
0x009C	0x0E01      	MOVLW       1
0x009E	0x6E82      	MOVWF       PORTC 
;buzzer.c,31 :: 		delay_ms(1000);
0x00A0	0x0E0B      	MOVLW       11
0x00A2	0x6E0B      	MOVWF       R11, 0
0x00A4	0x0E26      	MOVLW       38
0x00A6	0x6E0C      	MOVWF       R12, 0
0x00A8	0x0E5D      	MOVLW       93
0x00AA	0x6E0D      	MOVWF       R13, 0
L_main3:
0x00AC	0x2E0D      	DECFSZ      R13, 1, 0
0x00AE	0xD7FE      	BRA         L_main3
0x00B0	0x2E0C      	DECFSZ      R12, 1, 0
0x00B2	0xD7FC      	BRA         L_main3
0x00B4	0x2E0B      	DECFSZ      R11, 1, 0
0x00B6	0xD7FA      	BRA         L_main3
0x00B8	0x0000      	NOP
0x00BA	0x0000      	NOP
;buzzer.c,32 :: 		}
L_main2:
;buzzer.c,33 :: 		}
0x00BC	0xD7B6      	BRA         L_main0
;buzzer.c,34 :: 		}
L_end_main:
0x00BE	0xD7FF      	BRA         $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x001C     [164]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0001       [1]    R1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [2]    main_a_L1
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [2]    main_b_L1
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0008       [2]    main_c_L1
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [2]    main_d_L1
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0F39       [1]    ANSELB
0x0F81       [1]    PORTB
0x0F81       [0]    RB2_bit
0x0F81       [0]    RB3_bit
0x0F81       [0]    RB0_bit
0x0F81       [0]    RB1_bit
0x0F82       [1]    PORTC
0x0F93       [1]    TRISB
0x0F94       [1]    TRISC
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
