;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 9/3/2025 5:11:49 PM
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF000EF5C  	GOTO        184
0x0004	0x0000      	NOP
0x0006	0x0000      	NOP
0x0008	0xF000EF00  	GOTO        0
0x000C	0x0000      	NOP
0x000E	0x0000      	NOP
0x0010	0x0000      	NOP
0x0012	0x0000      	NOP
0x0014	0x0000      	NOP
0x0016	0x0000      	NOP
0x0018	0xD7F3      	BRA         0
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x001C	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x001E	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x0022	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x0024	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x0026	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x0028	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x002A	0x0012      	RETURN      0
; end of ___CC2DW
_knight_rider:
;lab_1.c,9 :: 		void knight_rider() {
;lab_1.c,10 :: 		int number = 1;  // bit used to walk via knight_rider()
0x002C	0x0E01      	MOVLW       1
0x002E	0x6E15      	MOVWF       knight_rider_number_L0 
0x0030	0x0E00      	MOVLW       0
0x0032	0x6E16      	MOVWF       knight_rider_number_L0+1 
;lab_1.c,11 :: 		PORTD = ~0x00;  // refresh portd (uses compliment of 0 for anode LEDs)
0x0034	0x0EFF      	MOVLW       255
0x0036	0x6E83      	MOVWF       PORTD 
;lab_1.c,14 :: 		while (number <= 128) {  // once bit reaches 256 it leaves the loop
L_knight_rider0:
0x0038	0x0E80      	MOVLW       128
0x003A	0x6E00      	MOVWF       R0 
0x003C	0x0E80      	MOVLW       128
0x003E	0x1816      	XORWF       knight_rider_number_L0+1, 0 
0x0040	0x5C00      	SUBWF       R0, 0 
0x0042	0xE102      	BNZ         L__knight_rider9
0x0044	0x5015      	MOVF        knight_rider_number_L0, 0 
0x0046	0x0880      	SUBLW       128
L__knight_rider9:
0x0048	0xE314      	BNC         L_knight_rider1
;lab_1.c,15 :: 		PORTC = number;  // set portc to value of bit
0x004A	0xFF82C015  	MOVFF       knight_rider_number_L0, PORTC
;lab_1.c,16 :: 		delay_ms(1000);  // delay 250ms
0x004E	0x0E0B      	MOVLW       11
0x0050	0x6E0B      	MOVWF       R11, 0
0x0052	0x0E26      	MOVLW       38
0x0054	0x6E0C      	MOVWF       R12, 0
0x0056	0x0E5D      	MOVLW       93
0x0058	0x6E0D      	MOVWF       R13, 0
L_knight_rider2:
0x005A	0x2E0D      	DECFSZ      R13, 1, 0
0x005C	0xD7FE      	BRA         L_knight_rider2
0x005E	0x2E0C      	DECFSZ      R12, 1, 0
0x0060	0xD7FC      	BRA         L_knight_rider2
0x0062	0x2E0B      	DECFSZ      R11, 1, 0
0x0064	0xD7FA      	BRA         L_knight_rider2
0x0066	0x0000      	NOP
0x0068	0x0000      	NOP
;lab_1.c,17 :: 		number *= 2;  // multiply bit by 2 to walk bit forward across LEDs
0x006A	0x3615      	RLCF        knight_rider_number_L0, 1 
0x006C	0x9015      	BCF         knight_rider_number_L0, 0 
0x006E	0x3616      	RLCF        knight_rider_number_L0+1, 1 
;lab_1.c,18 :: 		}
0x0070	0xD7E3      	BRA         L_knight_rider0
L_knight_rider1:
;lab_1.c,20 :: 		number = 1;  // bring back bit to 1
0x0072	0x0E01      	MOVLW       1
0x0074	0x6E15      	MOVWF       knight_rider_number_L0 
0x0076	0x0E00      	MOVLW       0
0x0078	0x6E16      	MOVWF       knight_rider_number_L0+1 
;lab_1.c,21 :: 		PORTC = 0x00;  // refresh portc
0x007A	0x6A82      	CLRF        PORTC 
;lab_1.c,24 :: 		while (number <= 128) {  // once bit reaches 256 it leaves the loop
L_knight_rider3:
0x007C	0x0E80      	MOVLW       128
0x007E	0x6E00      	MOVWF       R0 
0x0080	0x0E80      	MOVLW       128
0x0082	0x1816      	XORWF       knight_rider_number_L0+1, 0 
0x0084	0x5C00      	SUBWF       R0, 0 
0x0086	0xE102      	BNZ         L__knight_rider10
0x0088	0x5015      	MOVF        knight_rider_number_L0, 0 
0x008A	0x0880      	SUBLW       128
L__knight_rider10:
0x008C	0xE314      	BNC         L_knight_rider4
;lab_1.c,25 :: 		PORTD = ~number;  // set portd to value of bit
0x008E	0x1C15      	COMF        knight_rider_number_L0, 0 
0x0090	0x6E83      	MOVWF       PORTD 
;lab_1.c,26 :: 		delay_ms(1000);  // delay 250ms
0x0092	0x0E0B      	MOVLW       11
0x0094	0x6E0B      	MOVWF       R11, 0
0x0096	0x0E26      	MOVLW       38
0x0098	0x6E0C      	MOVWF       R12, 0
0x009A	0x0E5D      	MOVLW       93
0x009C	0x6E0D      	MOVWF       R13, 0
L_knight_rider5:
0x009E	0x2E0D      	DECFSZ      R13, 1, 0
0x00A0	0xD7FE      	BRA         L_knight_rider5
0x00A2	0x2E0C      	DECFSZ      R12, 1, 0
0x00A4	0xD7FC      	BRA         L_knight_rider5
0x00A6	0x2E0B      	DECFSZ      R11, 1, 0
0x00A8	0xD7FA      	BRA         L_knight_rider5
0x00AA	0x0000      	NOP
0x00AC	0x0000      	NOP
;lab_1.c,27 :: 		number *= 2;  // multiply bit by 2 to walk bit forward across LEDs
0x00AE	0x3615      	RLCF        knight_rider_number_L0, 1 
0x00B0	0x9015      	BCF         knight_rider_number_L0, 0 
0x00B2	0x3616      	RLCF        knight_rider_number_L0+1, 1 
;lab_1.c,28 :: 		}
0x00B4	0xD7E3      	BRA         L_knight_rider3
L_knight_rider4:
;lab_1.c,29 :: 		}
L_end_knight_rider:
0x00B6	0x0012      	RETURN      0
; end of _knight_rider
_main:
;lab_1.c,32 :: 		void main() {    // Main Function (program core)
;lab_1.c,33 :: 		TRISA = 0x00;  // TRISA sets direction of data traffic on PORTA to Output
0x00B8	0x6A92      	CLRF        TRISA 
;lab_1.c,34 :: 		TRISB = 0x00;  // TRISB sets direction of data traffic on PORTB to Output
0x00BA	0x6A93      	CLRF        TRISB 
;lab_1.c,35 :: 		TRISC = 0x00;  // TRISC sets direction of data traffic on PORTC to Output
0x00BC	0x6A94      	CLRF        TRISC 
;lab_1.c,36 :: 		TRISD = 0x00;  // TRISD sets direction of data traffic on PORTD to Output
0x00BE	0x6A95      	CLRF        TRISD 
;lab_1.c,38 :: 		while(1) {
L_main6:
;lab_1.c,39 :: 		knight_rider();
0x00C0	0xDFB5      	RCALL       _knight_rider
;lab_1.c,40 :: 		}
0x00C2	0xD7FE      	BRA         L_main6
;lab_1.c,41 :: 		}
L_end_main:
0x00C4	0xD7FF      	BRA         $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x001C      [16]    ___CC2DW
0x002C     [140]    _knight_rider
0x00B8      [14]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0001       [1]    R1
0x0001       [1]    __Lib_Conversions_Adjust_Hex_tmp_L0
0x0002       [2]    memcpy_dd_L0
0x0002       [2]    strlen_cp_L0
0x0002       [2]    memset_pp_L0
0x0002       [1]    R2
0x0002       [2]    memchr_s_L0
0x0003       [2]    Ltrim_original_L0
0x0003       [2]    memmove_tt_L0
0x0003       [1]    R3
0x0004       [2]    memcpy_ss_L0
0x0004       [1]    R4
0x0004       [2]    strcat_cp_L0
0x0004       [2]    strncpy_cp_L0
0x0004       [2]    strcpy_cp_L0
0x0004       [2]    strncat_cp_L0
0x0005       [1]    R5
0x0005       [2]    memmove_ff_L0
0x0005       [2]    LongIntToHex_input_half_L0
0x0005       [2]    Ltrim_p_L0
0x0005       [2]    LongWordToHex_input_half_L0
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0015       [2]    knight_rider_number_L0
0x0F82       [1]    PORTC
0x0F83       [1]    PORTD
0x0F92       [1]    TRISA
0x0F93       [1]    TRISB
0x0F94       [1]    TRISC
0x0F95       [1]    TRISD
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
