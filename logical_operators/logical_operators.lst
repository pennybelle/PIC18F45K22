;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 4/23/2025 7:08:04 PM
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF000EF16  	GOTO        44
0x0004	0x0000      	NOP
0x0006	0x0000      	NOP
0x0008	0xF000EF00  	GOTO        0
0x000C	0x0000      	NOP
0x000E	0x0000      	NOP
0x0010	0x0000      	NOP
0x0012	0x0000      	NOP
0x0014	0x0000      	NOP
0x0016	0x0000      	NOP
0x0018	0xD7F3      	BRA         0
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x001C	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x001E	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x0022	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x0024	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x0026	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x0028	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x002A	0x0012      	RETURN      0
; end of ___CC2DW
_main:
0x002C	0x0E80      	MOVLW       128
0x002E	0x6E15      	MOVWF       _reference2 
0x0030	0x6A16      	CLRF        22 
0x0032	0x0E01      	MOVLW       1
0x0034	0x6E17      	MOVWF       _reference 
0x0036	0x6A18      	CLRF        24 
;logical_operators.c,14 :: 		void main() {
;logical_operators.c,15 :: 		TRISB = 0xFF; // set portB as input
0x0038	0x0EFF      	MOVLW       255
0x003A	0x6E93      	MOVWF       TRISB 
;logical_operators.c,16 :: 		TRISC = 0xFF; // set portC as input
0x003C	0x0EFF      	MOVLW       255
0x003E	0x6E94      	MOVWF       TRISC 
;logical_operators.c,17 :: 		TRISD = 0x00; // set portD as output
0x0040	0x6A95      	CLRF        TRISD 
;logical_operators.c,18 :: 		TRISA = 0xFF; // set portA as input
0x0042	0x0EFF      	MOVLW       255
0x0044	0x6E92      	MOVWF       TRISA 
;logical_operators.c,21 :: 		ANSELB = 0x00;
0x0046	0x010F      	MOVLB       15
0x0048	0x6B39      	CLRF        ANSELB, 1
;logical_operators.c,22 :: 		ANSELC = 0x00;
0x004A	0x6B3A      	CLRF        ANSELC, 1
;logical_operators.c,23 :: 		ANSELD = 0x00;
0x004C	0x6B3B      	CLRF        ANSELD, 1
;logical_operators.c,24 :: 		ANSELA = 0x00;
0x004E	0x6B38      	CLRF        ANSELA, 1
;logical_operators.c,26 :: 		while(1) {
L_main0:
;logical_operators.c,27 :: 		if (PORTA == 0b00000001) {
0x0050	0x5080      	MOVF        PORTA, 0 
0x0052	0x0A01      	XORLW       1
0x0054	0xE104      	BNZ         L_main2
;logical_operators.c,28 :: 		PORTD = PORTB & PORTC;
0x0056	0x5082      	MOVF        PORTC, 0 
0x0058	0x1481      	ANDWF       PORTB, 0 
0x005A	0x6E83      	MOVWF       PORTD 
;logical_operators.c,29 :: 		} else if (PORTA == 0b00000010) {
0x005C	0xD06B      	BRA         L_main3
L_main2:
0x005E	0x5080      	MOVF        PORTA, 0 
0x0060	0x0A02      	XORLW       2
0x0062	0xE104      	BNZ         L_main4
;logical_operators.c,30 :: 		PORTD = PORTB | PORTC;
0x0064	0x5082      	MOVF        PORTC, 0 
0x0066	0x1081      	IORWF       PORTB, 0 
0x0068	0x6E83      	MOVWF       PORTD 
;logical_operators.c,31 :: 		} else if (PORTA == 0b00000100) {
0x006A	0xD064      	BRA         L_main5
L_main4:
0x006C	0x5080      	MOVF        PORTA, 0 
0x006E	0x0A04      	XORLW       4
0x0070	0xE104      	BNZ         L_main6
;logical_operators.c,32 :: 		PORTD = PORTB ^ PORTC;
0x0072	0x5082      	MOVF        PORTC, 0 
0x0074	0x1881      	XORWF       PORTB, 0 
0x0076	0x6E83      	MOVWF       PORTD 
;logical_operators.c,33 :: 		} else if (PORTA == 0b0001000) {
0x0078	0xD05D      	BRA         L_main7
L_main6:
0x007A	0x5080      	MOVF        PORTA, 0 
0x007C	0x0A08      	XORLW       8
0x007E	0xE103      	BNZ         L_main8
;logical_operators.c,34 :: 		PORTD = ~PORTB;
0x0080	0x1C81      	COMF        PORTB, 0 
0x0082	0x6E83      	MOVWF       PORTD 
;logical_operators.c,35 :: 		} else if (PORTA == 0b00010000) {
0x0084	0xD057      	BRA         L_main9
L_main8:
0x0086	0x5080      	MOVF        PORTA, 0 
0x0088	0x0A10      	XORLW       16
0x008A	0xE128      	BNZ         L_main10
;logical_operators.c,36 :: 		for (i=1; i<=8; i++) {
0x008C	0x0E01      	MOVLW       1
0x008E	0x6E19      	MOVWF       _i 
0x0090	0x0E00      	MOVLW       0
0x0092	0x6E1A      	MOVWF       _i+1 
L_main11:
0x0094	0x0E80      	MOVLW       128
0x0096	0x6E00      	MOVWF       R0 
0x0098	0x0E80      	MOVLW       128
0x009A	0x181A      	XORWF       _i+1, 0 
0x009C	0x5C00      	SUBWF       R0, 0 
0x009E	0xE102      	BNZ         L__main22
0x00A0	0x5019      	MOVF        _i, 0 
0x00A2	0x0808      	SUBLW       8
L__main22:
0x00A4	0xE316      	BNC         L_main12
;logical_operators.c,37 :: 		PORTD = reference;
0x00A6	0xFF83C017  	MOVFF       _reference, PORTD
;logical_operators.c,38 :: 		delay_ms(500);
0x00AA	0x0E06      	MOVLW       6
0x00AC	0x6E0B      	MOVWF       R11, 0
0x00AE	0x0E13      	MOVLW       19
0x00B0	0x6E0C      	MOVWF       R12, 0
0x00B2	0x0EAD      	MOVLW       173
0x00B4	0x6E0D      	MOVWF       R13, 0
L_main14:
0x00B6	0x2E0D      	DECFSZ      R13, 1, 0
0x00B8	0xD7FE      	BRA         L_main14
0x00BA	0x2E0C      	DECFSZ      R12, 1, 0
0x00BC	0xD7FC      	BRA         L_main14
0x00BE	0x2E0B      	DECFSZ      R11, 1, 0
0x00C0	0xD7FA      	BRA         L_main14
0x00C2	0x0000      	NOP
0x00C4	0x0000      	NOP
;logical_operators.c,39 :: 		reference = reference << 1;
0x00C6	0x3617      	RLCF        _reference, 1 
0x00C8	0x9017      	BCF         _reference, 0 
0x00CA	0x3618      	RLCF        _reference+1, 1 
;logical_operators.c,36 :: 		for (i=1; i<=8; i++) {
0x00CC	0x4A19      	INFSNZ      _i, 1 
0x00CE	0x2A1A      	INCF        _i+1, 1 
;logical_operators.c,40 :: 		}
0x00D0	0xD7E1      	BRA         L_main11
L_main12:
;logical_operators.c,41 :: 		reference = 0b00000001;
0x00D2	0x0E01      	MOVLW       1
0x00D4	0x6E17      	MOVWF       _reference 
0x00D6	0x0E00      	MOVLW       0
0x00D8	0x6E18      	MOVWF       _reference+1 
;logical_operators.c,42 :: 		} else if (PORTA == 0b00100000) {
0x00DA	0xD02C      	BRA         L_main15
L_main10:
0x00DC	0x5080      	MOVF        PORTA, 0 
0x00DE	0x0A20      	XORLW       32
0x00E0	0xE129      	BNZ         L_main16
;logical_operators.c,43 :: 		for (i=1; i<=8; i++) {
0x00E2	0x0E01      	MOVLW       1
0x00E4	0x6E19      	MOVWF       _i 
0x00E6	0x0E00      	MOVLW       0
0x00E8	0x6E1A      	MOVWF       _i+1 
L_main17:
0x00EA	0x0E80      	MOVLW       128
0x00EC	0x6E00      	MOVWF       R0 
0x00EE	0x0E80      	MOVLW       128
0x00F0	0x181A      	XORWF       _i+1, 0 
0x00F2	0x5C00      	SUBWF       R0, 0 
0x00F4	0xE102      	BNZ         L__main23
0x00F6	0x5019      	MOVF        _i, 0 
0x00F8	0x0808      	SUBLW       8
L__main23:
0x00FA	0xE318      	BNC         L_main18
;logical_operators.c,44 :: 		PORTD = reference2;
0x00FC	0xFF83C015  	MOVFF       _reference2, PORTD
;logical_operators.c,45 :: 		delay_ms(500);
0x0100	0x0E06      	MOVLW       6
0x0102	0x6E0B      	MOVWF       R11, 0
0x0104	0x0E13      	MOVLW       19
0x0106	0x6E0C      	MOVWF       R12, 0
0x0108	0x0EAD      	MOVLW       173
0x010A	0x6E0D      	MOVWF       R13, 0
L_main20:
0x010C	0x2E0D      	DECFSZ      R13, 1, 0
0x010E	0xD7FE      	BRA         L_main20
0x0110	0x2E0C      	DECFSZ      R12, 1, 0
0x0112	0xD7FC      	BRA         L_main20
0x0114	0x2E0B      	DECFSZ      R11, 1, 0
0x0116	0xD7FA      	BRA         L_main20
0x0118	0x0000      	NOP
0x011A	0x0000      	NOP
;logical_operators.c,46 :: 		reference2 = reference2 >> 1;
0x011C	0x3216      	RRCF        _reference2+1, 1 
0x011E	0x3215      	RRCF        _reference2, 1 
0x0120	0x9E16      	BCF         _reference2+1, 7 
0x0122	0xBC16      	BTFSC       _reference2+1, 6 
0x0124	0x8E16      	BSF         _reference2+1, 7 
;logical_operators.c,43 :: 		for (i=1; i<=8; i++) {
0x0126	0x4A19      	INFSNZ      _i, 1 
0x0128	0x2A1A      	INCF        _i+1, 1 
;logical_operators.c,47 :: 		}
0x012A	0xD7DF      	BRA         L_main17
L_main18:
;logical_operators.c,48 :: 		reference2 = 0b10000000;
0x012C	0x0E80      	MOVLW       128
0x012E	0x6E15      	MOVWF       _reference2 
0x0130	0x0E00      	MOVLW       0
0x0132	0x6E16      	MOVWF       _reference2+1 
;logical_operators.c,49 :: 		}
L_main16:
L_main15:
L_main9:
L_main7:
L_main5:
L_main3:
;logical_operators.c,50 :: 		}
0x0134	0xD78D      	BRA         L_main0
;logical_operators.c,51 :: 		}
L_end_main:
0x0136	0xD7FF      	BRA         $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x001C      [16]    ___CC2DW
0x002C     [268]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0001       [1]    R1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0015       [2]    _reference2
0x0017       [2]    _reference
0x0019       [2]    _i
0x0F38       [1]    ANSELA
0x0F39       [1]    ANSELB
0x0F3A       [1]    ANSELC
0x0F3B       [1]    ANSELD
0x0F80       [1]    PORTA
0x0F81       [1]    PORTB
0x0F82       [1]    PORTC
0x0F83       [1]    PORTD
0x0F92       [1]    TRISA
0x0F93       [1]    TRISB
0x0F94       [1]    TRISC
0x0F95       [1]    TRISD
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
